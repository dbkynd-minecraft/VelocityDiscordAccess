package com.dbkynd.vdaccess.discord;

import com.dbkynd.vdaccess.VDAccess;
import com.dbkynd.vdaccess.config.Config;
import com.dbkynd.vdaccess.http.ImageDownloader;
import com.dbkynd.vdaccess.http.WebRequest;
import com.dbkynd.vdaccess.mojang.MojangJSON;
import com.dbkynd.vdaccess.sql.MySQLService;
import com.dbkynd.vdaccess.sql.UserRecord;
import com.moandjiezana.toml.Toml;
import com.velocitypowered.api.proxy.Player;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.events.interaction.SlashCommandEvent;
import net.dv8tion.jda.api.interactions.InteractionHook;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.slf4j.Logger;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class AddCommandHandler {
    private static final Logger logger = VDAccess.logger;
    private static final WebRequest request = new WebRequest();
    private static final Toml config = new Config().read();
    private static final MySQLService sql = MySQLService.getInstance();

    static String addCommand = config.getString("Discord.addCommandName");
    static String embedMessageAdded = config.getString("Discord.Messages.embedMessageAdded");
    static String embedMessageUpdated = config.getString("Discord.Messages.embedMessageUpdated");
    static List<String> allowedChannels = new ArrayList<>(config.getList("Discord.allowedChannelIds"));

    public static void action(SlashCommandEvent event, String ign) {
        event.deferReply().queue();
        InteractionHook hook = event.getHook();
        String channel = event.getChannel().getName() + " (" + event.getChannel().getId() + ")";
        String user = event.getUser().getAsTag() + " (" + event.getUser().getId() + ")";

        logger.info("/" + event.getName() + " " + ign + " issued by: " + user + " in channel: " + channel);

        // Make sure the command was run from a channel we allow
        // If no channels are set allow all
        if (allowedChannels.size() > 0) {
            if (!allowedChannels.contains(event.getChannel().getId())) {
                logger.info("Commands from channel: " + channel + " are not allowed.");
                hook.sendMessage("The /" + addCommand + " command is not allowed from this channel.\nPlease talk to your server admin to find out what the proper channel(s) are.").setEphemeral(true).queue();
                return;
            }
        }

        // Get the user data from the Mojang API
        MojangJSON mojang = request.getMojangData(ign);

        // Tell the discord member we cannot find any data for the username they submitted
        if (mojang == null || mojang.getId() == null) {
            hook.sendMessage("Unable to get Mojang data for username **" + ign + "**. PLease double check the spelling.").queue();
            return;
        }

        // Try to download the user's avatar image so that it's in crafatar's cache for when Discord asks for it to embed.
        // I think when discord tries to embed the image it doesn't wait for it to be generated by crafatar like it would for a web client.
        // And therefore, even though the url is valid, Discord was not showing the thumbnail reliably.
        String thumbnail = "https://crafatar.com/renders/body/" + mojang.getId();
        ImageDownloader.main(thumbnail);

        String discordId = event.getUser().getId();
        String embedMessage;

        // Save to database
        try {
            if (sql.itemExists("discord_id", discordId)) {
                // Kick the member if they are currently joined and are updating the database
                // Had a past player exploit this to get his friend on by staying logged in and running the Discord command, adding their friend
                UserRecord userRecord = sql.getRegisteredPlayer("discord_id", discordId);
                Collection<Player> connectedPlayers = VDAccess.server.getAllPlayers();
                List<Player> playerNames = connectedPlayers.stream().filter(player -> Objects.equals(player.getUniqueId().toString(), userRecord.getUUID())).collect(Collectors.toList());
                if (playerNames.size() > 0) {
                    // Kick user
                    for (Player player : playerNames) {
                        player.disconnect(Component.text("You were disconnected for trying to update the allow list database while connected.").color(NamedTextColor.RED));
                    }
                    // Don't update the database if they were connected.
                    hook.sendMessage("Unable to update the allow list database while you account is currently joined. Please disconnect from the server and try again.").queue();
                    return;
                }

                // Update the database
                sql.setMinecraftName(discordId, mojang.getName().toLowerCase());
                sql.setUUID(discordId, mojang.getUUID().toString());
                sql.updateTimestamp(discordId);
                embedMessage = embedMessageUpdated;
                logger.info("Updated entry for discord user: " + user);
            } else {
                sql.addNewPlayer(discordId, mojang.getName().toLowerCase(), mojang.getUUID().toString());
                embedMessage = embedMessageAdded;
                logger.info("Added new entry for discord user: " + user);
            }
        } catch (Exception e) {
            e.printStackTrace();
            hook.sendMessage("There was an error updating the Minecraft user database with username **" + mojang.getName() + "**.").queue();
            return;
        }


        // Tell the Discord member that everything worked as expected!
        EmbedBuilder builder = new EmbedBuilder();
        builder.setDescription("```" + mojang.getName() + "```\n" + embedMessage);
        builder.setThumbnail(thumbnail);
        builder.setColor(0x5a9a30);
        MessageEmbed embed = builder.build();

        hook.sendMessageEmbeds(embed).queue();
    }
}
